<?php
/*
有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。
示例 1：
输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
示例 2：
输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每隔部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
示例 3：
输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。

 */

function removeOuterParentheses($S)
{
    $num = 0; // 定义用来计数的
    $str = '';
    for ($i = 0; $i < strlen($S); $i++) {
        if ($S[$i] == '(') {
            $num++; // 出现多少次左，就记录一下，只需要判断 字符串不第一个字符，和不是第一次统计的字符串
            if ($i > 0 && $num > 1) {
                $str .= $S[$i];
            }
        } else {
            $num--; // 出现右边了。就要减去一次总体的括号计数
            if ($num > 0) {
                $str .= $S[$i];
            }
        }
    }
    return $str;
}
$s = "(()())(())(()(()))";
var_dump(removeOuterParentheses($s));
